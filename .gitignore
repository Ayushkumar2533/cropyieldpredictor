import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error


# Load data
def load_data(file_path):
    data = pd.read_csv(file_path)
    return data

# Preprocess data
def preprocess_data(data):
    # Drop any unnecessary columns
    data.drop(['column1', 'column2'], axis=1, inplace=True)
    
    # Handle missing values
    data.fillna(data.mean(), inplace=True)
    
    # Scale data
    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    data[['feature1', 'feature2']] = scaler.fit_transform(data[['feature1', 'feature2']])
    
    return data

# Split data into training and testing sets
def split_data(data):
    X = data.drop(['yield'], axis=1)
    y = data['yield']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_tes

# Train model
def train_model(X_train, y_train):
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model

# Evaluate model
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    return mae

# Main function
def main():
    file_path = 'data.csv'
    data = load_data(file_path)
    data = preprocess_data(data)
    X_train, X_test, y_train, y_test = split_data(data)
    model = train_model(X_train, y_train)
    mae = evaluate_model(model, X_test, y_test)
    print(f'MAE: {mae:.2f}')

if _name_ == '_main_':
    main()

